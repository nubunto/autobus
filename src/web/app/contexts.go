// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=web/design
// --out=$(GOPATH)/src/web
// --version=v1.1.0-dirty
//
// API "autobus-web": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
	"strconv"
)

// CreateBusStopContext provides the BusStop create action context.
type CreateBusStopContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *BusStopPayload
}

// NewCreateBusStopContext parses the incoming request URL and body, performs validations and creates the
// context used by the BusStop controller create action.
func NewCreateBusStopContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateBusStopContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateBusStopContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateBusStopContext) Created(r *BusStopMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "autobus.web.platform/bus-stop.media+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// NearestBusStopContext provides the BusStop nearest action context.
type NearestBusStopContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Latitude  float64
	Longitude float64
	Radius    float64
}

// NewNearestBusStopContext parses the incoming request URL and body, performs validations and creates the
// context used by the BusStop controller nearest action.
func NewNearestBusStopContext(ctx context.Context, r *http.Request, service *goa.Service) (*NearestBusStopContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := NearestBusStopContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLatitude := req.Params["latitude"]
	if len(paramLatitude) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("latitude"))
	} else {
		rawLatitude := paramLatitude[0]
		if latitude, err2 := strconv.ParseFloat(rawLatitude, 64); err2 == nil {
			rctx.Latitude = latitude
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("latitude", rawLatitude, "number"))
		}
	}
	paramLongitude := req.Params["longitude"]
	if len(paramLongitude) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("longitude"))
	} else {
		rawLongitude := paramLongitude[0]
		if longitude, err2 := strconv.ParseFloat(rawLongitude, 64); err2 == nil {
			rctx.Longitude = longitude
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("longitude", rawLongitude, "number"))
		}
	}
	paramRadius := req.Params["radius"]
	if len(paramRadius) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("radius"))
	} else {
		rawRadius := paramRadius[0]
		if radius, err2 := strconv.ParseFloat(rawRadius, 64); err2 == nil {
			rctx.Radius = radius
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("radius", rawRadius, "number"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *NearestBusStopContext) OK(r []*BusStopMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowGPSContext provides the GPS show action context.
type ShowGPSContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowGPSContext parses the incoming request URL and body, performs validations and creates the
// context used by the GPS controller show action.
func NewShowGPSContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowGPSContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowGPSContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowGPSContext) OK(r []*GpsMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
