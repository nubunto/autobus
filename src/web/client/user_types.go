// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=web/design
// --out=$(GOPATH)/src/web
// --version=v1.1.0-dirty
//
// API "autobus-web": Application User Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"time"
)

// The stops where the bus passes through
type busStop struct {
	ID   *int     `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Loc  *geoJSON `form:"loc,omitempty" json:"loc,omitempty" xml:"loc,omitempty"`
	Name *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Publicize creates BusStop from busStop
func (ut *busStop) Publicize() *BusStop {
	var pub BusStop
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.Loc != nil {
		pub.Loc = ut.Loc.Publicize()
	}
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	return &pub
}

// The stops where the bus passes through
type BusStop struct {
	ID   *int     `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Loc  *GeoJSON `form:"loc,omitempty" json:"loc,omitempty" xml:"loc,omitempty"`
	Name *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// busStopPayload user type.
type busStopPayload struct {
	Latitude  *float64 `form:"latitude,omitempty" json:"latitude,omitempty" xml:"latitude,omitempty"`
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" xml:"longitude,omitempty"`
	Name      *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Publicize creates BusStopPayload from busStopPayload
func (ut *busStopPayload) Publicize() *BusStopPayload {
	var pub BusStopPayload
	if ut.Latitude != nil {
		pub.Latitude = ut.Latitude
	}
	if ut.Longitude != nil {
		pub.Longitude = ut.Longitude
	}
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	return &pub
}

// BusStopPayload user type.
type BusStopPayload struct {
	Latitude  *float64 `form:"latitude,omitempty" json:"latitude,omitempty" xml:"latitude,omitempty"`
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" xml:"longitude,omitempty"`
	Name      *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// geoJSON user type.
type geoJSON struct {
	Coordinates []float64 `form:"coordinates,omitempty" json:"coordinates,omitempty" xml:"coordinates,omitempty"`
	Type        *string   `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// Publicize creates GeoJSON from geoJSON
func (ut *geoJSON) Publicize() *GeoJSON {
	var pub GeoJSON
	if ut.Coordinates != nil {
		pub.Coordinates = ut.Coordinates
	}
	if ut.Type != nil {
		pub.Type = ut.Type
	}
	return &pub
}

// GeoJSON user type.
type GeoJSON struct {
	Coordinates []float64 `form:"coordinates,omitempty" json:"coordinates,omitempty" xml:"coordinates,omitempty"`
	Type        *string   `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// The GPS data received by the core Autobus application
type gps struct {
	DateTime  *time.Time `form:"dateTime,omitempty" json:"dateTime,omitempty" xml:"dateTime,omitempty"`
	Direction *int       `form:"direction,omitempty" json:"direction,omitempty" xml:"direction,omitempty"`
	Head      *string    `form:"head,omitempty" json:"head,omitempty" xml:"head,omitempty"`
	ID        *string    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Latitude  *float64   `form:"latitude,omitempty" json:"latitude,omitempty" xml:"latitude,omitempty"`
	Longitude *float64   `form:"longitude,omitempty" json:"longitude,omitempty" xml:"longitude,omitempty"`
	Speed     *float64   `form:"speed,omitempty" json:"speed,omitempty" xml:"speed,omitempty"`
	Status    *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	Type      *string    `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Valid     *bool      `form:"valid,omitempty" json:"valid,omitempty" xml:"valid,omitempty"`
}

// Publicize creates Gps from gps
func (ut *gps) Publicize() *Gps {
	var pub Gps
	if ut.DateTime != nil {
		pub.DateTime = ut.DateTime
	}
	if ut.Direction != nil {
		pub.Direction = ut.Direction
	}
	if ut.Head != nil {
		pub.Head = ut.Head
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.Latitude != nil {
		pub.Latitude = ut.Latitude
	}
	if ut.Longitude != nil {
		pub.Longitude = ut.Longitude
	}
	if ut.Speed != nil {
		pub.Speed = ut.Speed
	}
	if ut.Status != nil {
		pub.Status = ut.Status
	}
	if ut.Type != nil {
		pub.Type = ut.Type
	}
	if ut.Valid != nil {
		pub.Valid = ut.Valid
	}
	return &pub
}

// The GPS data received by the core Autobus application
type Gps struct {
	DateTime  *time.Time `form:"dateTime,omitempty" json:"dateTime,omitempty" xml:"dateTime,omitempty"`
	Direction *int       `form:"direction,omitempty" json:"direction,omitempty" xml:"direction,omitempty"`
	Head      *string    `form:"head,omitempty" json:"head,omitempty" xml:"head,omitempty"`
	ID        *string    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Latitude  *float64   `form:"latitude,omitempty" json:"latitude,omitempty" xml:"latitude,omitempty"`
	Longitude *float64   `form:"longitude,omitempty" json:"longitude,omitempty" xml:"longitude,omitempty"`
	Speed     *float64   `form:"speed,omitempty" json:"speed,omitempty" xml:"speed,omitempty"`
	Status    *string    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	Type      *string    `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Valid     *bool      `form:"valid,omitempty" json:"valid,omitempty" xml:"valid,omitempty"`
}
